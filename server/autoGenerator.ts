import { storage } from "./storage";
import { generateRecipe, generateRecipeImage } from "./openai";

// Lista expandida de ideias de receitas para gera√ß√£o autom√°tica (100+ op√ß√µes para evitar duplicatas)
const recipeIdeas = [
  // Pratos principais brasileiros
  "feijoada light",
  "moqueca de peixe",
  "bob√≥ de camar√£o fit",
  "bai√£o de dois integral",
  "caldo verde mineiro",
  "vatap√° de frango",
  "tutu de feij√£o",
  "pacu assado com farofa",
  "picanha na churrasqueira",
  "costela de porco no bafo",
  
  // Massas e risotos
  "macarr√£o ao pesto de manjeric√£o",
  "lasanha de abobrinha",
  "nhoque de batata-doce",
  "carbonara integral",
  "risotto de cogumelos",
  "talharim com camar√£o",
  "canelone de ricota",
  "espaguete √† carbonara fit",
  "ravioli de ab√≥bora",
  "penne com molho de tomate fresco",
  
  // Carnes e aves
  "frango xadrez",
  "bife √† parmegiana fit",
  "carne de panela",
  "frango refogado com quiabo",
  "alm√¥ndegas de peru",
  "escalope de frango",
  "cox√£o mole ao molho madeira",
  "peito de peru defumado",
  "frango ao curry",
  "carne de sol com macaxeira",
  
  // Peixes e frutos do mar
  "salm√£o grelhado com ervas",
  "bacalhau √† br√°s",
  "caldeirada de peixe",
  "camar√£o na moranga",
  "til√°pia no papillote",
  "linguado grelhado",
  "casquinha de siri",
  "bobo de camar√£o",
  "moqueca capixaba",
  "peixe ensopado",
  
  // Sopas e caldos
  "canja de galinha",
  "sopa de mandioquinha",
  "caldo de feij√£o",
  "sopa de ervilha",
  "consomm√© de legumes",
  "sopa de tomate",
  "caldo verde",
  "sopa de cebola",
  "gazpacho brasileiro",
  "sopa de batata-baroa",
  
  // Saladas e pratos leves
  "salada de gr√£o-de-bico",
  "tabule brasileiro",
  "salada de beterraba",
  "salada caesar fit",
  "salada de palmito",
  "salada de feij√£o fradinho",
  "salada morna de quinoa",
  "salada de r√∫cula com pera",
  "salada de lentilha",
  "salada tropical",
  
  // Sobremesas tradicionais
  "brigadeiro gourmet",
  "pudim de leite condensado",
  "quindim caseiro",
  "beijinho de coco",
  "cocada queimada",
  "pav√™ de chocolate",
  "mousse de chocolate",
  "torta de morango",
  "petit gateau",
  "tiramisu brasileiro",
  
  // Bolos e tortas
  "bolo de cenoura com cobertura",
  "torta de lim√£o siciliano",
  "bolo de fub√° cremoso",
  "torta de ma√ß√£",
  "bolo de banana",
  "cheesecake de maracuj√°",
  "bolo de laranja",
  "torta holandesa",
  "bolo prest√≠gio",
  "bolo de chocolate molhadinho",
  
  // Lanches e salgados
  "p√£o de queijo mineiro",
  "coxinha de frango",
  "pastel de queijo",
  "esfiha de carne",
  "empada de palmito",
  "sandu√≠che natural",
  "wrap integral",
  "crepe salgado",
  "quiche de legumes",
  "torta salgada de frango",
  
  // Bebidas e vitaminas
  "vitamina de banana com aveia",
  "suco verde detox",
  "smoothie de frutas vermelhas",
  "batida de coco",
  "caipirinha de frutas",
  "limonada su√≠√ßa",
  "√°gua saborizada",
  "ch√° gelado de hibisco",
  "vitamina de a√ßa√≠",
  "suco de laranja com cenoura",
  
  // Pratos vegetarianos
  "hamb√∫rguer de quinoa",
  "estrogonofe de cogumelos",
  "curry de gr√£o-de-bico",
  "lasanha de berinjela",
  "risotto de ab√≥bora",
  "quiche sem carne",
  "salada de lentilha",
  "wrap vegano",
  "bolinho de aipim",
  "escondidinho vegetal"
];

function createSlug(title: string): string {
  return title
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[^a-z0-9\s-]/g, "")
    .trim()
    .replace(/\s+/g, "-");
}

let autoGenerationStats = {
  recipesGenerated: 0,
  sessionStartTime: Date.now(),
};

export function getAutoGenerationStats() {
  return autoGenerationStats;
}

export function resetAutoGenerationStats() {
  autoGenerationStats = {
    recipesGenerated: 0,
    sessionStartTime: Date.now(),
  };
}

async function generateRandomRecipe(): Promise<void> {
  try {
    console.log("ü§ñ Generating automatic recipe...");
    
    // Tentar gerar receita √∫nica por at√© 5 tentativas
    let generatedRecipe;
    let attempts = 0;
    const maxAttempts = 5;
    
    while (attempts < maxAttempts) {
      attempts++;
      
      // Escolher uma ideia aleat√≥ria
      const randomIdea = recipeIdeas[Math.floor(Math.random() * recipeIdeas.length)];
      
      try {
        // Gerar receita com IA
        generatedRecipe = await generateRecipe(randomIdea);
        break; // Se chegou aqui, a receita √© √∫nica
      } catch (error) {
        if (error instanceof Error && error.message.includes("Receita similar j√° existe")) {
          console.log(`üîÑ Tentativa ${attempts}/${maxAttempts}: Receita duplicada, tentando novamente...`);
          if (attempts === maxAttempts) {
            throw new Error("N√£o foi poss√≠vel gerar receita √∫nica ap√≥s 5 tentativas");
          }
          continue; // Tenta novamente
        } else {
          throw error; // Outro erro, propaga
        }
      }
    }
    
    if (!generatedRecipe) {
      throw new Error("Falha na gera√ß√£o de receita ap√≥s m√∫ltiplas tentativas");
    }
    
    // Tentar gerar imagem, continuar sem imagem se falhar
    let imageUrl = null;
    try {
      imageUrl = await generateRecipeImage(generatedRecipe.title);
    } catch (error) {
      console.log("‚ö†Ô∏è Falha na gera√ß√£o de imagem autom√°tica, continuando sem imagem:", error instanceof Error ? error.message : "Erro desconhecido");
    }
    
    // Criar slug √∫nico
    let slug = createSlug(generatedRecipe.title);
    let counter = 1;
    while (await storage.getRecipeBySlug(slug)) {
      slug = `${createSlug(generatedRecipe.title)}-${counter}`;
      counter++;
    }
    
    // Formar conte√∫do completo
    const content = `## Ingredientes

${generatedRecipe.ingredients.map(ing => `- ${ing}`).join('\n')}

## Modo de Preparo

${generatedRecipe.instructions.map((inst, index) => `${index + 1}. ${inst}`).join('\n\n')}

## Dicas

${generatedRecipe.tips.map(tip => `- ${tip}`).join('\n')}`;

    // Criar receita no banco
    const recipeData = {
      title: generatedRecipe.title,
      slug,
      description: generatedRecipe.description,
      content,
      ingredients: generatedRecipe.ingredients,
      instructions: generatedRecipe.instructions,
      tips: generatedRecipe.tips,
      cookTime: generatedRecipe.cookTime,
      difficulty: generatedRecipe.difficulty,
      servings: generatedRecipe.servings,
      imageUrl,
      metaTitle: generatedRecipe.metaTitle,
      metaDescription: generatedRecipe.metaDescription,
      metaKeywords: generatedRecipe.metaKeywords,
      hashtags: generatedRecipe.hashtags,
      category: generatedRecipe.category,
      subcategory: generatedRecipe.subcategory,
      externalRecipeTitle: generatedRecipe.externalRecipeTitle,
      externalRecipeUrl: generatedRecipe.externalRecipeUrl,
      published: true,
    };

    await storage.createRecipe(recipeData);
    
    // Atualizar estat√≠sticas
    autoGenerationStats.recipesGenerated++;
    
    // Atualizar timestamp da √∫ltima gera√ß√£o
    await storage.updateSystemSettings({ 
      lastGenerationAt: new Date() 
    } as any);
    
    console.log(`‚úÖ Auto-generated recipe: "${generatedRecipe.title}" (${autoGenerationStats.recipesGenerated} total this session)`);
    
  } catch (error) {
    console.error("‚ùå Error generating automatic recipe:", error);
  }
}

let autoGenerationInterval: NodeJS.Timeout | null = null;

export async function startAutoGeneration(): Promise<void> {
  const settings = await storage.getSystemSettings();
  
  if (!settings.autoGenerationEnabled) {
    console.log("üî¥ Auto-generation is disabled");
    return;
  }
  
  // Parar intervalo anterior se existir
  if (autoGenerationInterval) {
    clearInterval(autoGenerationInterval);
  }
  
  const intervalMs = settings.generationIntervalMinutes * 60 * 1000;
  
  console.log(`üü¢ Starting auto-generation every ${settings.generationIntervalMinutes} minutes`);
  
  // Gerar primeira receita imediatamente
  await generateRandomRecipe();
  
  // Configurar intervalo para pr√≥ximas gera√ß√µes
  autoGenerationInterval = setInterval(async () => {
    const currentSettings = await storage.getSystemSettings();
    if (currentSettings.autoGenerationEnabled) {
      await generateRandomRecipe();
    } else {
      stopAutoGeneration();
    }
  }, intervalMs);
}

export function stopAutoGeneration(): void {
  if (autoGenerationInterval) {
    clearInterval(autoGenerationInterval);
    autoGenerationInterval = null;
    console.log("üî¥ Auto-generation stopped");
  }
}

export async function restartAutoGeneration(): Promise<void> {
  stopAutoGeneration();
  await startAutoGeneration();
}

// Fun√ß√£o para calcular pr√≥xima gera√ß√£o
export async function getNextGenerationTime(): Promise<number | null> {
  const settings = await storage.getSystemSettings();
  
  if (!settings.autoGenerationEnabled || !settings.lastGenerationAt) {
    return null;
  }
  
  const lastGeneration = new Date(settings.lastGenerationAt).getTime();
  const intervalMs = settings.generationIntervalMinutes * 60 * 1000;
  const nextGeneration = lastGeneration + intervalMs;
  
  return Math.max(0, nextGeneration - Date.now());
}